Video lessons 26.
Layout web: 
    The structure and form that the site will present your content visually. This content's organization on the screen must be built in a way that consider a good experience to the user, facilitating the interation between user and interface in computers and mobile devices(responsive layout), and also enable an easy compreehension of the elements distributed on the layout (button, forms, texts, images, videos, etc).)

Layout types:
    Fixed: it has fixed measures to your layout's elements, indepedent of screen's resolution.
    Fluid: the elements has measures that is defined with a percent value (%) that vary according to the screen's width and height. The fluid layout doesn't consider the device screen's resolution.
    Responsive: the elements are resized and grouped of differents ways according to the screen's resolution, making that the navegation experience be optimized to every resolution.
    Organic: it doesn't exist a fixed grid and the elements are scattered of an organic way around the layout, so that every page has a different diagramation without be limited to columns.
    Material: it's a layout concept introduced by Google, where the main concept consists in explore the layout based in the printed materials design, where the three-dimensional space is worked from the relation between light, shadow and moviment using three dimensions (axes X, Y e Z).

Video lessons 27.
Controlling the responsivity of your interface with Media Queries.
Media Queries:
    It's a CSS's module that allows us to determine specifics styles of a HTML for determinated media. Also allows us to define a break or a starting point (breakpoint) for that a styles set can be aplicated to a HTML element.

How to use:
    @media only screen and (min-width: 554px) {
        .aleatory-class {

        }

    } --> The css gonna function when the width is bigger or equal to 554px. In this case, 554px is the breakpoint

    @media only screen and (min-width: 992px) {
        .aleatory-class {
            
        }
    }

Video lessons 28.
Just demonstration of how to use Media Queries.

Video lessons 29.
    Introduction to gryd systems and CSS frameworks.

Video lessons 30.
    Grids:
        It's a layout structuring of web pages.
        Grids isn't a must for sites development, but the use a grid system helps to mantain consistency of the aligment of page's elements, organize the interface's elements, also facilitate the front-end development and helps other webdesigners that can work later in the same project.

    Frameworks and GRIDS CSS:
        The framework that will be used in this project is the Bootstrap; https://getbootstrap.com/docs/3.4/css/
        The grid system divides our layout's width in 12 columns.
        It isn't a must the use of all the 12 columns, you can use less or more. 

    How it works?
        The parts of a grid system is represented by a div with a class that has a default: col-sm-6 ; col-md-5 ; col-lg-6
        Basically you have the "col" that is "column", "sm" "md" or "lg" that is the view - so, you have the small, medium and large - and the number "1<=x<=12" that represents the number of columns that the div will occupy.
        The bootstrap default breakpoint says that when the prefix was .col- (0px<x<576px); .col-sm-(576px<x<768); .col-md-(768px<x<992); .col-lg-(992px<x<1200); .col-xl-(1200px<=x).

Video lessons 31.
    The bootstrap says that the columns has to be inside a row and, if possible, inside of a container.
    class = "container-fluid" occupy all the width.
    When the sum of the column's values doesn't result in 12, it's recommended that you use in the div class row the justify-content-center (class="row justify-content-center"). With this, the elements of the container and row elements will be alligned at the center. 
    Revision: -the divs has to be inside a <div class="row"></div>;
	      -to centralize the gryd itemns put in the row the justify-content-center: <div class="row justify-content-center"></div>
	      -use the <div class="object-class container-fluid"></div> to define that the container will occupy 100% screen's width.

Video lessons 32.
    Introduction to Flexbox.
    It is a propriety that allows pass to your sons other organization proprieties of layout. "Flexible --> Flex"
    Flexbox-guide: https://css-tricks.com/snippets/css/a-guide-to-flexbox/

Video lessons 33:
    Container(father):
        In flexbox model, it's necessary that the container has the display: flex. Basically the father div has to have a display: flex.
        flex-direction: 
            It can receveid until four values: row; row-reverse; column; column-reverse;
            flex-direction: row --> The elements will be aligned in line;
            flex-direction: row-reverse --> The elements will be aligned inversely flex-direction: row;
            flex-direction: column --> The ellements will occupy all the line and will be distributed one below the other; width: 100%;
            flex-direction: column-reverse --> Invert the order of the flex-direction: column.
    
Video lessons 34.
    If we put six items in the container and determine with the flex-basis that every item will have a width of 25%, so, the idea is that in a line will stay four items (totalizing 100% - 25 * 4) and two items below them. But this not happens because the "flex-direction: row" will be priorized and will force the container's items to be resized to a width percent - based on the 25% - that can distribute items in a row.
    Container(father):
        flex-wrap:
            It has three proprieties: nowrap; wrap; wrap-reverse;
            flex-wrap: nowrap --> Default;
            flex-wrap: wrap --> With this command, we say that we wanna that the container's items take strictly the flex-basis value and the flex container will be regrouped to top from bottom in multiple lines;
            flex-wrap: wrap-reverse --> Regroupe the items to bottom from top - a inverse way of wrap.

Video lessons 35.
    Container(father):
        flex flow:
            It's a form to resume the flex-wrap and flex-direction in one command;
            The default is row and nowrap;
            flex-flow: 'flex-direction' 'flex-wrap'.

        Justify-content:
            It's a way to organize the flexbox elements;
            It has six proprieties: flex-start | flex-end | center | space-beteen | space-around | space-evenly;
            flex-start: the elements will aligned at the left size;
            flex-end: the elements will aligned at the right size;
            center: the elements will be aligned at the center of the page;
            space-between: puts the initial item and the last item in the page's border and divide the items with the same spacement between them;
            space-around: puts a same space around every element, it's like a "margin" around every element;
            space-evenly: puts a EQUAL space between every element;

Video lessons 36.
    Container(father):
        align-items: 
            It works in the reverse flex-direction axis, if your flex-direction was row (axis x) the align items will aligned the items in the axis Y and the inverse to columns;
            It has five proprieties: stretch | flex-start/start/self-start | flex-end/end/self-end | center | baseline;
            stretch: is the default, basically the elements occupy 100% of the container axis;
            flex-start: align items at the container top. In the event of you don't define the height, the flex-start will get the min-height;
            flex-end: align items at the container bottom, end of the container;
            center: centralize the items at the page center;
            baseline: align according to the content in the flex item;

Video lessons 37.
    Container(father):
        Align-content:
            Align an items group - multiples lines -, it workds for all the lines;
            It has proprieties: flex-start | flex-end | space-between | space-around | stretch(default);
            flex-start: put the group of items at the container top;
            flex-end: put the group of items at the bottom container;
            space-between: puts the first items and last items group in the container bord and divide the groups with a equal space between them;
            space-around: puts a same space around every element, it's like a "margin";
            stretch: elements will take the max-value;

Video lessons 38.
    Items(sons):
        Order: 
            allows reorganize the container elements;
            It works of this whay:
                .order-1 {
                    order: 1;
                } 
                If you put this class in a element, he will be the first of the items following the order that you defined;
                If all the elements received the same class - by example: order-1 - the default will be choosed according to the HTML structure;
                If you has ten elements and you just put the order in nine, the element that don't received any order will be the first, because he will receveid the value 0.
    

            
