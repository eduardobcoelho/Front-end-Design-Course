Video lesson 57.
    JavaScript:
        it's a language implemented natively and originally like a web browsers part for that the scripts could be executed in the client side and could interact without the necessity of this script pass through the server;
        the javascript allow us to control the DOM elements behavior: HMLT, XML and SVG, generating dynamic interactions by scripts to these events; 
        Dom(Document Object Model):
            all the things that we can interact with JS it's inside of the DOM;
            stores values, funcionalities, etc;
            by the DOM we can acess all the elements hierarchy of our page:
                we can acess the elements(fathers or sons), the tags, the values stores inside a div of our pages, etc;

        the JavaScript allows create interactions in a page;
        inside of all the browsers exist an JS interpreter;
        scripts --> JS code;

Video lesson 58.
    Client side:
        How a web page is renderized:
            1. you acess a site by the link;
            2. the server will receive this requisition
            3. the server will understand what is the page that you're requiring;
            4. he will set up the document in the server;
            5. when he finishes the assembly he gives the document to the client side --> the browser;
                5.1 - OBS: the server gives a HTML to the browser;
            7. the first thing that the client side looks it's the HTML structure;
            8. the second thing that the client side looks it's the resources (medias);
            9. the third thing that the client side looks is the CSS;
            10. finally, the last thing that the client side looks is the JavaScript:
                10.1 - he will check if exists JavaScript in the page;
                10.2 - download the JavaScript file.
            11. After that the client side know all that information he will renderized the page.
        
        Why JavaScript is the last to be verified by the browser:
            because the JavaScript depends of the HTML and CSS for start to work;
            basicallly the HTML is a part of the DOM and the JS it's to interact with the DOM, so, if doesn't exist DOM the JS doesn't have nothing to interact;

Client side:
        How a web page is renderized:
            1. you acess a site by the link;
            2. the server will receive this requisition
            3. the server will understand what is the page that you're requiring;
            4. he will set up the document in the server;
            5. when he finishes the assembly he gives the document to the client side --> the browser;
                5.1 - OBS: the server gives a HTML to the browser;
            7. the first thing that the client side looks it's the HTML structure;
            8. the second thing that the client side looks it's the resources (medias);
            9. the third thing that the client side looks is the CSS;
            10. finally, the last thing that the client side looks is the JavaScript:
                10.1 - he will check if exists JavaScript in the page;
                10.2 - download the JavaScript file.
            11. After that the client side know all that information he will renderized the page.
        
        Why JavaScript is the last to be verified by the browser:
            because the JavaScript depends of the HTML and CSS for start to work;
            basicallly the HTML is a part of the DOM and the JS it's to interact with the DOM, so, if doesn't exist DOM the JS doesn't have nothing to interact;

Video lesson 59.
    Console:
        it's a text interface that has a code interpreter;

Video lesson 60 and 61.
    API - Apllication Programming interface:
        objects that the JavaScript provides to us;
        we interact with a programming language through of your API;
        the JavaScript has your own native API in the browsers, and is through of your rules that we can consult and interact with your proprieties;
        all the JavaScript API is stored in a window object;
        the list of rules to interact with the JS API can be consulted in your documentation, that can be found in the W3C or Mozilla MDN site.

    Window object:
        it has items;

Video lesson 62.
    Primitive datas:
        String:
            normally used for texts but also can show numbers, but this numbers would serve just for visualization and doesn't can be used to arithmetics operations.

        Number:
            define the data type in number, enabling your utilization for arithmetics expressions.
        
        Boolean:
            true or false.

        Null:
            it always be a value to be atributed to a variable. Empty value;
                let x = null;

        Undefined:
            when a variable is created but without a value. She is a primitive data of the undefined type.
    
    String + String --> concatenation;
    String + Number --> concatenation;
    Number + Number --> sum.

Video lesson 63.
    JS variables:
        storing data/values in the memory of our Client side;
        it's a named local created for store a value;
        this way, a value can be accessed through a defined name;

        var name = "Luiz Eduardo"; | let age = 18; | const height = 1.70;

        const:
            a const variable has to receive a value;
            basically he can't be undefined;
            the value of a const variable can be changed.

        let:
            it's a scope variable;
            just can be called in the same scope that he will defined.

Video lesson 64.
    Operators and precedence:
        operators have the power of give operation instructions to the values em the JavaScript.
            Example: "=" assignment operator;
        
        operators types:
            attribution;
            comparation;
            arithmetic;
            bit a bit;
            logic;
            unaries;
            ternary;
            relational.

            comparation:
                31 == '31' --> will return true because of the JS polimofirsm. So, the JS transform the 31 that is a number in a string to do the comparation;
                31 === '31' --> will return false because in this case, the JS take literally the originally datatype without do the polimofirsm.
                10 != '10'--> will return false because of the JS polimofirsm;
                10 !== '10' --> will return true;

            logic:
                && --> and;
                || --> or;

            precedence:
                ()
                **
                * / %
                + -

                a = b = 5; --> the JS reads from right to left;
                so, 5 = b = a;

            example with if:
                let idade = 31;
                if ( (50+10 && idade + 20) > 50){
                    console.log("True");
                } else {
                    console.log("False");
                }
                this script return True in the console because the (50+10) and (idade + 20) are bigger than 50;

Video lesson 65 and 66.
    Selectors - part 01:
        selecting elements individually;

        selector by ID:
            document.getElementById('my-item-id');

        selector by class:
            document.getElementByClassName('my-item-class'); --> returns an array with all the elements with the class writed.

        selector by query:
            document.querySelector(".btn"); --> by id with query;
            document.querySelector("#'id'"); --> by class with query;
            document.querySelector("'tag_name'") || document.getElementByTagName("'tag_name'");

            document.querySelector('.class-item'); --> returns just the first item with the class writed;
            document.querySelectorAll('.class-item'); --> returns an array with all the elements with the class writed;

Video lesson 67 and 68.
    NOTE! ! !
        Regex:
            to check if a string is a valid email;
            var isEmail = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    IF/Else:
        A conditional IF is a conditional structure that executes what is describe inside of your block in case that the condition was true. If was false, executes the else block;
        if(condition){
            execute if the condition was true.
        }

        if(condition) {
            execute if the condition was true.
        } else {
            execute if the condition was false.
        }

    .value:
        takes the value of a variable;
        var fieldName = document.getElementById('name');
        var nameStr = fieldName.value;

