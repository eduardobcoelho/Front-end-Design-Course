Video lesson 57.
    JavaScript:
        it's a language implemented natively and originally like a web browsers part for that the scripts could be executed in the client side and could interact without the necessity of this script pass through the server;
        the javascript allow us to control the DOM elements behavior: HMLT, XML and SVG, generating dynamic interactions by scripts to these events; 
        Dom(Document Object Model):
            all the things that we can interact with JS it's inside of the DOM;
            stores values, funcionalities, etc;
            by the DOM we can acess all the elements hierarchy of our page:
                we can acess the elements(fathers or sons), the tags, the values stores inside a div of our pages, etc;

        the JavaScript allows create interactions in a page;
        inside of all the browsers exist an JS interpreter;
        scripts --> JS code;

Video lesson 58.
    Client side:
        How a web page is renderized:
            1. you acess a site by the link;
            2. the server will receive this requisition
            3. the server will understand what is the page that you're requiring;
            4. he will set up the document in the server;
            5. when he finishes the assembly he gives the document to the client side --> the browser;
                5.1 - OBS: the server gives a HTML to the browser;
            7. the first thing that the client side looks it's the HTML structure;
            8. the second thing that the client side looks it's the resources (medias);
            9. the third thing that the client side looks is the CSS;
            10. finally, the last thing that the client side looks is the JavaScript:
                10.1 - he will check if exists JavaScript in the page;
                10.2 - download the JavaScript file.
            11. After that the client side know all that information he will renderized the page.
        
        Why JavaScript is the last to be verified by the browser:
            because the JavaScript depends of the HTML and CSS for start to work;
            basicallly the HTML is a part of the DOM and the JS it's to interact with the DOM, so, if doesn't exist DOM the JS doesn't have nothing to interact;

Client side:
        How a web page is renderized:
            1. you acess a site by the link;
            2. the server will receive this requisition
            3. the server will understand what is the page that you're requiring;
            4. he will set up the document in the server;
            5. when he finishes the assembly he gives the document to the client side --> the browser;
                5.1 - OBS: the server gives a HTML to the browser;
            7. the first thing that the client side looks it's the HTML structure;
            8. the second thing that the client side looks it's the resources (medias);
            9. the third thing that the client side looks is the CSS;
            10. finally, the last thing that the client side looks is the JavaScript:
                10.1 - he will check if exists JavaScript in the page;
                10.2 - download the JavaScript file.
            11. After that the client side know all that information he will renderized the page.
        
        Why JavaScript is the last to be verified by the browser:
            because the JavaScript depends of the HTML and CSS for start to work;
            basicallly the HTML is a part of the DOM and the JS it's to interact with the DOM, so, if doesn't exist DOM the JS doesn't have nothing to interact;

Video lesson 59.
    Console:
        it's a text interface that has a code interpreter;

Video lesson 60 and 61.
    API - Apllication Programming interface:
        objects that the JavaScript provides to us;
        we interact with a programming language through of your API;
        the JavaScript has your own native API in the browsers, and is through of your rules that we can consult and interact with your properties;
        all the JavaScript API is stored in a window object;
        the list of rules to interact with the JS API can be consulted in your documentation, that can be found in the W3C or Mozilla MDN site.

    Window object:
        it has items;

Video lesson 62.
    Primitive datas:
        String:
            normally used for texts but also can show numbers, but this numbers would serve just for visualization and doesn't can be used to arithmetics operations.

        Number:
            define the data type in number, enabling your utilization for arithmetics expressions.
        
        Boolean:
            true or false.

        Null:
            it always be a value to be atributed to a variable. Empty value;
                let x = null;

        Undefined:
            when a variable is created but without a value. She is a primitive data of the undefined type.
    
    String + String --> concatenation;
    String + Number --> concatenation;
    Number + Number --> sum.

Video lesson 63.
    JS variables:
        storing data/values in the memory of our Client side;
        it's a named local created for store a value;
        this way, a value can be accessed through a defined name;

        var name = "Luiz Eduardo"; | let age = 18; | const height = 1.70;

        const:
            a const variable has to receive a value;
            basically he can't be undefined;
            the value of a const variable can be changed.

        let:
            it's a scope variable;
            just can be called in the same scope that he will defined.

Video lesson 64.
    Operators and precedence:
        operators have the power of give operation instructions to the values em the JavaScript.
            Example: "=" assignment operator;
        
        operators types:
            attribution;
            comparation;
            arithmetic;
            bit a bit;
            logic;
            unaries;
            ternary;
            relational.

            comparation:
                31 == '31' --> will return true because of the JS polimofirsm. So, the JS transform the 31 that is a number in a string to do the comparation;
                31 === '31' --> will return false because in this case, the JS take literally the originally datatype without do the polimofirsm.
                10 != '10'--> will return false because of the JS polimofirsm;
                10 !== '10' --> will return true;

            logic:
                && --> and;
                || --> or;

            precedence:
                ()
                **
                * / %
                + -

                a = b = 5; --> the JS reads from right to left;
                so, 5 = b = a;

            example with if:
                let idade = 31;
                if ( (50+10 && idade + 20) > 50){
                    console.log("True");
                } else {
                    console.log("False");
                }
                this script return True in the console because the (50+10) and (idade + 20) are bigger than 50;

Video lesson 65 and 66.
    Selectors - part 01:
        selecting elements individually;

        selector by ID:
            document.getElementById('my-item-id');

        selector by class:
            document.getElementByClassName('my-item-class'); --> returns an array with all the elements with the class writed.

        selector by query:
            document.querySelector(".btn"); --> by id with query;
            document.querySelector("#'id'"); --> by class with query;
            document.querySelector("'tag_name'") || document.getElementByTagName("'tag_name'");

            document.querySelector('.class-item'); --> returns just the first item with the class writed;
            document.querySelectorAll('.class-item'); --> returns an array with all the elements with the class writed;

Video lesson 67 and 68.
    NOTE! ! !
        Regex:
            to check if a string is a valid email;
            var isEmail = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    IF/Else:
        A conditional IF is a conditional structure that executes what is describe inside of your block in case that the condition was true. If was false, executes the else block;
        if(condition){
            execute if the condition was true.
        }

        if(condition) {
            execute if the condition was true.
        } else {
            execute if the condition was false.
        }

    .value:
        takes the value of a variable;
        var fieldName = document.getElementById('name');
        var nameStr = fieldName.value;

    .test():
        it's a method that make tests;
        example (email test):
            var isEmail = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^/<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            isEmail.test(emailInput);
    
    .classList:
        it's a JS property that is used to acess a class.

    .innerText = "text":
        it's to add a text;

    wrapperName.getElementsByTagName('span').classList.add('sucess'):
        wrapperName --> the variable that stored the DOM element;
        wrapperName.getElementsByTagName('span') --> is taking the span element that is inside of the element stored in the wrapperName variable;
        wrapperName.getElementByClassName('span').classList --> classList is a JS property to acess classes;
        wrapperName.getElementsByTagName('span').classList.add('sucess') --> the .classList.add('sucess') it's adding a class to the span inside of the element stored in the variable wrapperName.

    wrapperName.getElementsByTagName('span').innetText = "":
        this line it's adding a text to the span that is inside of the element stored in the variable wrapperName.

Video lesson 69.
    Switch case:
        The conditional switch rates a expression combining the expression value for a clause case and executes the instructions associated to the case;
        switch(expression){
            case value1:
                instructions executed when the expression result goes equal to value1
                [break;]
            case value2:
                instructions executed when the expression result goes equal to value2
                [break;]
            case value3:
                instructions executed when the expression result goes equal to value3
                [break;]
            default:
                instructions executed when the expression result goes different of every cases
                [break;]
        }

Video lesson 70.
    DOM Events:
        They are used to notify news to the code during the user navegation;
        Events can represent from basic interactions of the user (clicks, page scroll, etc.) to automatic notifications of news in the DOM;
        
        Mouse events:
            auxclick;
            click;
            contextmenu;
            dblclick;
            mousedown;
            mouseenter;
            mouseLeave;
            mousemove;
            mouseover;
            mouseout;
            mouseup;
            pointerlockchange;
            pointerlockerror;
            select.

        How to do:
            var myBox = document.getElementById('');
            myBox.addEventListener() --> method used;
            myBox.addEventListener('click') --> the type of interaction;
            myBox.addEventListener('click', fuction(){
                --> function details <--
            }) --> a function that will run when you do the type of interaction - in this case, the 'click';

Video lesson 71.
    NOTE! ! !
        .append() --> method used to add something in a DOM element;
        example:
            var myBox = document.getElementById('box);
            myBox.append();

    Functions:
        it's a code block that executes a task(rotine);
        the function usually receive a value (argument), transform this value internally and return a new value;

              FuncName  Parameters    Tasks and rotine
                    |     |    |            |
                    |     |    |            |
        function myName(arg1, arg2) {return arg1+arg2;
        }

        arrow function:
            const myName = (arg1, arg2) => {return arg1+arg2};

Video lesson 72 and 73.
    NOTE! ! !   
    .join():
        it's a method that it's used to define the character that will be used to separate the array items.

    Array:
        to declare an array you have to use [];
        example:
            var frutas = ["Orange","Kiwi","Strawberry]

        .push():
            it's used to add an item to an array;
            example:
                var array = ["one","two","three"];
                console.log(array);
                // Array(3)
                // 0:"one"
                // 1:"two"
                // 2:"three"
                // length: 3

                array.push("four")

                console.log(array);
                // Array(4)
                // 0:"one"
                // 1:"two"
                // 2:"three"
                // 3:"four"
                // length: 4

        .pop():
            removes the array last item.

        .shift():
            removes the array first item.
        
        .unshift():
            add to the front of an array.

        element.insertAdjacentHTML(position, text):
            it's used to insert a HTML in a element;
            element:
                where do you want to insert;

            position:
                "beforebegin":
                    before the element itself.
                
                "afterbegin":
                    just inside the element, before its first child.

                "beforeend":
                    just inside the element, after its last child.

                "afterend":
                    after the element itself.

            text:
                it's what do you want to add;
                the html that you want to add.

Video lesson 74, 75, 76.
    NOTE ! ! !
    .toLoweCase(); --> it's a method used to transform a string in just lower case characters;

    innerHTML = ''; --> it's a property used to replace in the HTML;

    setAttribute(name, value); --> it's a method used to set or define an attribute value;
        example: in html -->  <img id="image" />
                 in JS --> var image = getElementById('image');
                           image.setAttribute('id', 'idChanged');
                 in html --> <img id="idChanged">

    in HTML the target="_blank" means that when the element is clicked a new window will open. 

    Objects:
        it's a property collection and a property is an association between a name(or key) and a value - a property value may be a function that is considerated an object method;
        objects in JavaScript can be compared with real life objects. In JavaScript, a object is an independent entity with properties and types;
        a cup, by example, is an object with properties. A cup has color, a form, etc. In that same way, an objext in JS may have properties that define your characteristics;
        example:
      
            bola = { 

                format: "esferic",
                diameter: 32,
                firstColor = "white",
                secondColor = "black",
                kick: function() {
                    commands to kick
                }
                
            }

        you may store several items in a property like he were an array array;
        example:

            myCats = {

                gato: [

                    {cat01 properties}, {cat02 properties}, {cat03 properties};
                    
                ]

            }

Video lesson 77.
    NOTE ! ! !
    Object.keys --> keys is an Object property used to access the keys of an object;
    
    Object.values --> values is an Object property used to acccess the keys values of an object;

    Object.entries --> entries is an Object property that is used to transform every line of our object in a different array;
        OBS: can be used to separate some key and value. 

    map doesn't was made to objects. 

    Loops:
        for in:
            check if exists a required value inside of an array or object;

Section 05 finished.