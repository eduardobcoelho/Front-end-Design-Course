Video lesson 43.
    All the animation goes in a CSS class that is composed for all the proprieties below.
    Animations with CSS;
        Stages to animate a CSS element - keyframes.
        Keyframes:
            they are the frames of an animation;
            moments of our animation. 
            you can edit in % value or from to;
                Example(%):
                    0% {

                    }

                    50% {

                    }

                Example(from to){
                    from {

                    }

                    to {

                    }
                }

        Transform proprieties:
            Is the animation's transformation of a frame for another frame;
            define the changes of every break.
            Transition:
                It's a way of modify the transform settings, smoothing the animations, by example;
                It's basic the configuration of the transition.

        Animation:
            Propriety that applies in a div the animation that we want;
            stores the keyframes, transform and transition proprieties.
            Addclass:
                A CSS class that stores all the animation.

Video lesson 44 and 45.
    Transition:
        Allows define what we want that change in the animation;
        example:
            transition: all; --> All the proprieties of the animation will affect the element;
            transition: width; --> Just the width will be affected in the transition. 
        example 2:
            transition: all 3s ease-in; --> First he defines the elements that will be affected, after defines the animation duration and finally defines the animation effect; 
        Animation: | name | | duration | | play-state |;

Video lesson 46.
    You can separate the keyframes accordind to the % value that is relationed with the animation's duration;
    Transform:
        translate( valueX, valueY ); --> animate movement;
        rotate( 180deg ); --> rotation;
        scale( valueX, valueY ); --> 
        skewX( 20deg )
        skewY( 20deg )
        matrix ( scaleX,skewY(),skewX(),scaleY(),translateX(),translateY() )
        --------------------------------------------------------------------
        translate3d( valueX, valueY, valueZ );
        rotate3d( 180deg );
        scale3d( valueX, valueY, valueZ, 90deg );
        matrix (n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n);

Video lesson 47.
    Vendor-Prefix:
        It's a way of run the CSS animations in some browser versions;
        -webkit-transform: translate{300px, 150px;} --> Safari 4+;
        -moz-transform: translate(300px, 150px;) --> Firefox 5+;
        -ms-transform: translate(300px, 150px;) --> IE 8 and 9;
        transform: translate(300px, 150px) --> IE 10 + Firefox 29+;

Video lesson 48.
    Don't forget: it's necessary that you set the CSS commands in the object class before edit the animation.

Video lesson 49.
    Library Animate CSS:
        A library full of pre defined animations to facilitate our life;
        link --> https://daneden.github.io/animate.css/
        To use:
            <h1 class"animated animationName"></h1>

Video lesson 50.
    SVG images:
        It's a scalable vector image;
        The SVG file can be escalated without lose your quality and can be animated via code;

        Creating, importing and animating:
            Create the SVG image with a software of drawing vector - Adobe Illustrator; 
            Export the SVG and optimize;
            Animate the SVG inside of the SVG file or starting of a styles leaf external;

Video lesson 51 and 52.
    It has a tag for svg images;
    <svg></svg>;

    SVG images are made in XML and divided by groups and paths.

Video lesson 53 and 54.
    Ways to insert a SVG image in HTML:
        by the <img /> tag:
            It allows animations just inside of the SVG file;
            <img src="image.svg" />

        by the <object></object> tag:
            It allows acess the SVG elements starting of a external file, enabling formatations CSS. Must to call the external CSS file inside of the SVG with the line <?xml-stylesheet type="text/css" href="svg.css" ?> before open the SVG tag;
            <object data="imagem.svg" type="image/svg+xml"></object>
            you have to link the .css file into the .css file:
                <?xml-stylesheet type="text/css" href="style.css" ?>
            after that, take the css line that is inside of the .svg file and put him in the .css file;
                <style type="text/css">
	                .st0{fill:none;stroke:#000000;stroke-width:4;stroke-miterlimit:10;}
                </style>
                .st0{
                    fill; none;
                    stroke #000000;
                    stroke-width: 4;
                    stroke-miterlimit: 10;
                }

        Inline:
            put the SVG in the HTML;
            itsn't recommended.

Video lesson 55.
    NOTE!!!
        When we have a number without unit of measurement, this number is interpreted in pixels. In this case, the stroke-dashoffset and stroke-dasharray are in pixels.
    
    stroke-dasharray:
        partitions the element;

    stroke-dashoffset:
        move the line;
    
Video lesson 56.
    